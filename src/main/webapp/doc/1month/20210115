2021.01.15

MVC
client -> jsp ->client
MVC2
client -> servlet -> jsp

m -> service-dao
v -> jsp(template engine : thymeleaf,velocity,freemarker,mustache)
c -> servlet(spring mvc,struts)

Model View Controller
- 모델(비지니스로직)과 뷰(화면)은 분리(M과 V는 서로를 모름)

pojo ??

model1 : 요청을 jsp가 접수, 응답도 jsp에서 생성
         비지니스 로직이 jsp(model)이 jsp(view)안에서 호출됨
         만약 다른 jsp(view)에서도 동일한 비지니스 로직(model)을 사용 할 경우
         비지니스 로직의 변경시 많은 코드 수정이 동반된다 ==> 유지 보수의 어려움
          
model2 : 정리하기

MVC 패턴 : Model - View - Controller
		  각 역할을 담당하는 객체를 분리
		  controller : 요청을 접수, 비지니스 로직을 호출 및 저장(scope)
		  Model : 비지니스 로직 처리
		  View : 화면 출력을 담당
		  
		  model1과 다르게 view와 model을 분리
		  view에서 필요한 데이터는 scope 객체를 통해 받는다
		  
Front Controller : 모든 요청을 하나의 객체가 접수 받는 형태
                   장점 : ??	  
                   
표현언어(Expression Language) - 표현식을 보다 쉽고 간결하게 사용할 수 있는 표현방법

중첩된 속성은 .을 이용한다

javaee -> servlet,jsp  
             
${expression} : 기본 객체 탐색

- 영역명을 사용하지 않은 경우
기본객체 - pageScope, requestScope,sessionScope,applicationScope
page,request,sessin,application 영역을 차례대로 검색
  






