2021.01.18

el,jstl ==> 표현식, 스크립틀릿을 걷어 내기 위함
        ==> JSP파일을 최대한 태그 처럼 보이게 하기 위함
            (자바 코드를 걷어낸다)
el에서 제공하는 것은 pageContext밖에 없음 page.Context.getRequest()

JSTL 태그라이브러리 사용방법 지시자<%@ %>
1. taglib 지시자를 선언

   <%@ taglib prefix="namespace, 개발자가 편한대로 지정가능, 관습적으로 많이 사용하는 prefix를 보통 따름 "
   			  uri="사용하려고 하는 태그의 식별자"%>
   			  
core 태그 라이브러리 : c
국제화 태그 라이브러리 : fmt
   			
CORE tag 라이브러리
속성저장
request.setAttribute("속성명",속성값);
session.setAttribute("속성명",속성값);

el 사용시 null값 처리를 자동으로 함 ==> registUser.jsp null 처리 간소화 작업

<%= request.getContextPath()%> ==> ${pageContext.request.contextPath}

${pageContext.}
${param.}
${속성명}

${request...} - 제공안함

JSTL CORE 조건 제어(java if)
if ==> java 단일 if (if 하고 끝나는 것)
choose ==> java if, eles if, else

JSTL 반복문(for, 향상된 for) ******** 많이 사용
forEach

JSTL core URL
import : 특정 url에서 반환하는 값(html)을 호출하는 곳에 추가하는 기능
redirect : 클라이언트에게 다른  url로 재전송 요청
url : url 경로 작성

JSTL core 기타
catch
out

필터(Filter)
요청을 처리 할 Servlet, jsp로 요청이 전달 되기 전에 사전에 먼저 요청을 받아
공통적인 작업을 처리 할 수 있는 객체

1. 필터는 여러개 등록할 수 있다
   . 요청이 - 필터1 - 필터 2-.......-최종적으로 해당 요청을 처리할 Servlet,jsp 로 요청이 전달
     Serlvet,jsp에 의해 응답이 생성되면 거쳐온 필터의 역순으로 응답이 전달된다
     Serlvet,jsp ==> 필터 2 - 필터 1 ----최종 응답 전달
2. 필터 생성방법
   . Filter 인터페이스 구현
   . init(), destroy(), doFilter()
3. 필터 등록
	web.xml 등록
	@WebFilter("/")

실습 : 요청 URI 통계 필터
	  request.getRequestURI()
	  Map<String, Integer> map;
	  key - URI, 값은 - 요청 횟수
	  	 /login.jsp, 5
	  	 /pagingUser, 15
	  	 
	  요청 통계자료를 담은 map 객체를 다른 Servlet,jsp 에서도 활용하려면? applicationScope에 저장

* 동치, 동일
메모리값의 주소가 같은지 - 동일
동일 이면 동치이다
동치 이면 동일은 아닌다
	  
	  






