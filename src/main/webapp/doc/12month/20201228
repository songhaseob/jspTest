2020.12.29 4일차

mavenrepository(즐겨찾기) 접속후 logback 검색후 1.2.3 라이브러리 추가
google에 logback검색후 첫번째 logbackhome홈페이지 접속 Documentation 클릭 the logback manual->
configuration
Automatic configuration with logback-test.xml or logback.xml 복사
resources 파일에 xml파일만든후 복붙!

System.out.println 앞으로 사용 금지 (왜 사용하면 안되는건지??)

대부분의 개발자들은 로그를 찍기 위해서 Sytem.out.println()메서드를 사용한 시스템 로그를 많이 사용한다.
가장 편하고, 확인하기 좋은 방법이지만 성능에 영향을 많이 주는 경우가 빈번히 발생한다
왜 성능에 영향을 많이 줄까? 파일이나 콘솔에 로그를 남길 경우를 생각해보면 내용이 완전히 프린트 되거나 저장 될때 까지
뒤에 프린트 하려는 부분은 대기 할수 밖에 없다 특히 콘솔에 로그를 남길 경우에는 더더욱 그렇다. 그렇게 되면 애플리케이션
에서는 대기시간이 발생한다. 이 대기 시간은 시스템의 속도에 의존적이다 만약 디스크에 로그를 남긴다면, 서버 디스크
rpm이 높을수록 로그의 처리 속도는 빨라 질 것이다.

더 큰 문제는 System.out.println()으로 출력하는 로그가 개발할때만 사용된다는 것이다. 운영할때는 전혀 사용되지
않고, 볼 수도 없는 디버그용 로그를 운영 서버에서 고스란히 처리하고 있는 셈이다.

개발할때는 상세한 로깅이 필요
운영 환경에서는 에러 메세지만 필요
public void println(String x){
synchronized(동기화 접근을 못하게)(this){
	print(x);
	newLine();
	}
}
이것을 사용하게 되면 다운이 될수 있다.

SLF4J - Simple Logging Facade for Java
1세대 라이브러리 - log4j

logging 사용 이유 :  개발시 의도한대로 동작하고 있는지 검사
ex : 웹브라우저를 통해 server로 요청(localhost/basicServlet)
        doGet메소드가 호출이 되었는지 로그를 통해 확인

        파라미터가 의도한대로 서블릿으로 전달이 되었는지 확인
logging과 비슷한 목적으로 사용하는 것 : 디버깅

log level 설정에 따른 logger 메소드 동작여부

로깅 문자열 결합을 피하기 위한 방법(왜 피해야 하는지??)




기본루트 

<root level="debug">
    <appender-ref ref="STDOUT" />
 </root>

관심없는 로그까지 출력이된다(라이브러리....등등 출력이된다)
      <logger name="kr.or.ddit" level="debug">
           <appender-ref ref="STDOUT" /> *ref 참조한다 
       </logger>

trace : debug 보다 상세한 정보를 출력 할때
debug: 프로그램을 디버깅 하기 위한 정보를 출력 할때
info : 상태변경과 같은 정보성 메세지 출력시
warn 향후 시스템에 문제가 발생할 가능성이 있는 메시지 출력시
error : 에러가 발생 했을때 ex : catch

========================================================================

servlet : java에 html 코드를 삽입
          생기는 문제점
          1. html 코드들이 문자 취급되기 때문에 오타를 발견 하기 어려움
          2. 협업의 문제점
             java - 프로그래머
             html - 디자이너
          3. 개발자가 코드를 리딩하는데 가독성의 문제
          ==> jsp의 탄생 배경

jsp(java server page) : html코드에 java를 삽입
	요청에 따라 동적으로 컨텐츠(html,json,xml 등)을 생성/전달
	jsp는 화면 구성에 사용(html안에 java 코드를 사용한다)
	servlet은 로직 처리시에 사용 -> MVC framework(sping,struts등)사용

1. jsp는 servlet으로 변환되어 서비스 된다
2. servlet-container(tomcat)이 jsp를 서블릿을 ㅗ변환하는 과정에서
   사용하는 폴더는 work 폴더
   . tomcat도 개발자가 만든 프로그램을 비정상적으로 동작할 때가 있음
   . 개발자가 jsp파일을 수정하였음에도 수정 내역이 반영되지 않을 경우
     work 폴더에 생성된 jsp 변환 파일들(java,class)을 삭제해주면 새롭게 
     만들어 준다
3. jsp를 서블릿으로 변환하는 시기는 해당 jsp에 대해 최초 요청이 일어 났을 경우에 변환
   . 서블릿으로 생성이 된 이후 같은 파일에 대한 요청은 이미 변환된 파일로 서비스

지시자
스클립틀릿 : java 코드 기술 ==> JSTL
표현식 : 출력 ==> EL
주석
선언부 : 변수, 메소드 선언 ==> VIEW와는 크게 관련이 없는 부분
















