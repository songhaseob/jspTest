8일차 2021.01.04

TCP연결성 : 프로세스 시작 부터 종료까지 연결
client -> 연결 -> 요청 -> 처리
              <- 응답
              
HTTP비연결성 : 요청시 연결, 응답 후 연경 종료
          
         연결종료
client 요청 -> 처리    
           연결
       
           응답
           <-
           연결종료
           
           요청
           
           연결
           응답
           
HTTP 프로토콜의 특징
1. 비연결성
   . 요청을 보내고 응답을 받게 되면 서버와의 연결은 끊어 진다
   . 서버로 재 요청시 서버는 클라이언트가 누구인지 알 수 있도록 session과 cookie를 이용

2. 웹브라우저는 서버로 요청 시 해당 서버(도메인)에 설정된 쿠키 값을 항상 같이 전송한다
   . 서버가 클라이언트가 누구인지 식별할 때 사용
   . cookie : 브라우저에 저장되는 정보
   
3. java기반 서버는 요청을 받게 되면 해당 요청의 쿠기 정보중에
   JSESSIONID라는 쿠키가 있는지 확인한다      
   
   JSESSIONID 쿠키가 없을 경우
   서버는 신규 접속 요청이라고 판단, SESSION을 새롭게 만들고 응답을 생성 할 때 
   SESSION ID(JSESSIONID)를 응답 헤더에 포함하고 해당 응답을 받은 브라우저는
   JSESSIONID 쿠키 값을 브라우저에 저장한다  
   
   JSESSIONID 쿠기가 있을 경우
   JSESSIONID에 해당하는 SESSION을 사용(기존 접속한 사용자로 인식)

웹에서 사용자(client)란 ? 웹 브라우저
동인한 인물?(X)

cookie 길 찾기 ==> 동화

스코프 : 웹 어플리케이션에서 객체(속성,attribute)를 유지/공유 하는 영역
속성: 클라이언트의 요청을 처리하는 과정에서 servlet/jsp 사이에서 공유하는 정보
page - jsp 페이지 내에서만 공유되는 영역 / jsp -> pageContext / servlet -> N/A
request - 클라이언트의 요청 정보가 유지되는 동안 공유되는 영역(dispatch) / jsp -> request / servlet -> request
session - 클라이언트의 정보가 유지되는 동안 공유되는 영역 / jsp -> session / servlet-> request.getSession()
application - 웹 어플리케이션 내에서 공유되는 객체의 영역 / jsp -> application / servlet-> getServletContext()

속성 : 요청을 처리하는 과정에서 sevlet/jsp 사이에서 공유하는 정보
scope : 속성을 담을 수 있는 영역, 객체

scope 객체
page (pageContext)          : 해당 jsp 페이지 내에서만 유효한 공간 (java의 block 안에 선언된 지역변수)
request(HttpServletRequest) : 요청이 처리 될 때까지만 유효한 공간(java의 지역변수)
session (HttpSession)       : session이 유효한 동안 유지되는 공간 (java의 인스턴스 객체)
application (SevletContext) : 웹 어플리케이션에서 하나만 유지되는 공간 (java의 static 변수)

-------------------------------------------------------------------------------------------------------------------------------

scope 객체 실습(집가서 한번 더 해보기!)

웹 브라우저로 다음 주소에 접속 : localhost/scope (GET방식)
해당 요청을 처리해줄 servlet 생성(kr.or.ddit.sevlet.scope.Scope.java)
GET 요청에 대해서는 화면을 webapp/jsp/scope.jsp로 응답 생성 위임

scope.jsp에는 하나의 input 태그와 (name-scope) submit 버튼을 생성
전송 메소드는 POST, 전송 주소는 /scope 파라미터를 확인하여
request, session, application scope에 다음과 같이 속성을 저장

request : 속성명 = request, 속성값 = scope파라미터 + "_request"
session : 속성명 = session, 속성값 = scope파라미터 + "_session"
application : 속성명 = application, 속성값 = scope파라미터 + "_application"

속성 설정이 끝나면 webapp/jsp/scopeResult.jsp로 forward
scopeResult.jsp에서는 Scope servlet 에서 설정한 3개의 속성을
속성명 : 속성값
속성명 : 속성값
속성명 : 속성값 형식으로 화면에 출력

scope 객체의 속성관련 메소드

속성 조회 : 스코프객체.getAttribute("속성명"), 반환타입 : Object 
          ***비교 getParameter("파라미터명"), 반환타입 : String
          
속성 저장 : 스코프객체.setAttribute("속성명","속성값"), 반환타입 : void
 
속성 삭제 : 스코프객체.removeAttribute("속성명"), 반환타입 : void

속성 이름 검색 : 스코프객체 : getAttributeNames(), 반환타입 : Enumeration



테스트

1. localhost/scope 접속
2. input tag에 brown 값 입력 후 전송 버튼 클릭
3. 결과 화면 확인
   request : brown_request
   session : brown_session
   application : brown_application

2] 1]번과 같은 브라우저를 사용하여
    localhost/jsp/scopeResult.jsp로 바로 접속시
	request : null
   session : brown_session
   application : brown_application
   
3] 1]번과 다른 브라우저를 사용하여
	localhost/jsp/scopeResult.jsp로 바로 접속시

	 request : null
   	 session : null
     application : brown_application 

4] 3] 번과 동일한 브라우저를 사용하여
	 localhost/jsp/scopeResult.jsp로 바로 접속시
	 request : sally_request
   	 session : sally_session
     application : sally_application

5] 1] 번과 동일한 브라우저를 사용하여
	 localhost/jsp/scopeResult.jsp로 바로 접속시
	 request : null
   	 session : brown_session
     application : sally_application
1] 번 브라우저 : 크롬
2] 번 브라우저 edge




































































